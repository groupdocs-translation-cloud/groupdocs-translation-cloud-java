/*
 * GroupDocs.Translation.ApiGateway.Web
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import com.groupdocs.ApiCallback;
import com.groupdocs.ApiClient;
import com.groupdocs.ApiException;
import com.groupdocs.ApiResponse;
import com.groupdocs.Configuration;
import com.groupdocs.Pair;
import com.groupdocs.ProgressRequestBody;
import com.groupdocs.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import com.groupdocs.model.AutoPostRequest;
import com.groupdocs.model.CloudFileResponse;
import com.groupdocs.model.CloudHugoResponse;
import com.groupdocs.model.CloudTextResponse;
import com.groupdocs.model.CsvFileRequest;
import java.io.File;
import com.groupdocs.model.HealthCheckStatus;
import com.groupdocs.model.LanguagePairData;
import com.groupdocs.model.OcrFileRequest;
import com.groupdocs.model.PdfFileRequest;
import com.groupdocs.model.PresentationFileRequest;
import com.groupdocs.model.ResxFileRequest;
import com.groupdocs.model.SpreadsheetFileRequest;
import com.groupdocs.model.StatusResponse;
import com.groupdocs.model.TextDocumentFileRequest;
import com.groupdocs.model.TextRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TransportApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TransportApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TransportApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for autoPost
     * @param autoPostRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call autoPostCall(AutoPostRequest autoPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = autoPostRequest;

        // create path and map variables
        String localVarPath = "/auto";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call autoPostValidateBeforeCall(AutoPostRequest autoPostRequest, final ApiCallback _callback) throws ApiException {
        return autoPostCall(autoPostRequest, _callback);

    }

    /**
     * Translate any supported file
     * 
     * @param autoPostRequest  (optional)
     * @return StatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public StatusResponse autoPost(AutoPostRequest autoPostRequest) throws ApiException {
        ApiResponse<StatusResponse> localVarResp = autoPostWithHttpInfo(autoPostRequest);
        return localVarResp.getData();
    }

    /**
     * Translate any supported file
     * 
     * @param autoPostRequest  (optional)
     * @return ApiResponse&lt;StatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StatusResponse> autoPostWithHttpInfo(AutoPostRequest autoPostRequest) throws ApiException {
        okhttp3.Call localVarCall = autoPostValidateBeforeCall(autoPostRequest, null);
        Type localVarReturnType = new TypeToken<StatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Translate any supported file (asynchronously)
     * 
     * @param autoPostRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call autoPostAsync(AutoPostRequest autoPostRequest, final ApiCallback<StatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = autoPostValidateBeforeCall(autoPostRequest, _callback);
        Type localVarReturnType = new TypeToken<StatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for csvPost
     * @param csvFileRequest String in body of request, containing JSON with parameters for translation. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call csvPostCall(CsvFileRequest csvFileRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = csvFileRequest;

        // create path and map variables
        String localVarPath = "/csv";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call csvPostValidateBeforeCall(CsvFileRequest csvFileRequest, final ApiCallback _callback) throws ApiException {
        return csvPostCall(csvFileRequest, _callback);

    }

    /**
     * Translate CSV and TSV files
     * 
     * @param csvFileRequest String in body of request, containing JSON with parameters for translation. (optional)
     * @return StatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public StatusResponse csvPost(CsvFileRequest csvFileRequest) throws ApiException {
        ApiResponse<StatusResponse> localVarResp = csvPostWithHttpInfo(csvFileRequest);
        return localVarResp.getData();
    }

    /**
     * Translate CSV and TSV files
     * 
     * @param csvFileRequest String in body of request, containing JSON with parameters for translation. (optional)
     * @return ApiResponse&lt;StatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StatusResponse> csvPostWithHttpInfo(CsvFileRequest csvFileRequest) throws ApiException {
        okhttp3.Call localVarCall = csvPostValidateBeforeCall(csvFileRequest, null);
        Type localVarReturnType = new TypeToken<StatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Translate CSV and TSV files (asynchronously)
     * 
     * @param csvFileRequest String in body of request, containing JSON with parameters for translation. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call csvPostAsync(CsvFileRequest csvFileRequest, final ApiCallback<StatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = csvPostValidateBeforeCall(csvFileRequest, _callback);
        Type localVarReturnType = new TypeToken<StatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentPost
     * @param textDocumentFileRequest String in body of request, containing JSON with parameters for translation. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentPostCall(TextDocumentFileRequest textDocumentFileRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = textDocumentFileRequest;

        // create path and map variables
        String localVarPath = "/document";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentPostValidateBeforeCall(TextDocumentFileRequest textDocumentFileRequest, final ApiCallback _callback) throws ApiException {
        return documentPostCall(textDocumentFileRequest, _callback);

    }

    /**
     * Translate Microsoft Word documents, rtf, txt, odt
     * 
     * @param textDocumentFileRequest String in body of request, containing JSON with parameters for translation. (optional)
     * @return StatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public StatusResponse documentPost(TextDocumentFileRequest textDocumentFileRequest) throws ApiException {
        ApiResponse<StatusResponse> localVarResp = documentPostWithHttpInfo(textDocumentFileRequest);
        return localVarResp.getData();
    }

    /**
     * Translate Microsoft Word documents, rtf, txt, odt
     * 
     * @param textDocumentFileRequest String in body of request, containing JSON with parameters for translation. (optional)
     * @return ApiResponse&lt;StatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StatusResponse> documentPostWithHttpInfo(TextDocumentFileRequest textDocumentFileRequest) throws ApiException {
        okhttp3.Call localVarCall = documentPostValidateBeforeCall(textDocumentFileRequest, null);
        Type localVarReturnType = new TypeToken<StatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Translate Microsoft Word documents, rtf, txt, odt (asynchronously)
     * 
     * @param textDocumentFileRequest String in body of request, containing JSON with parameters for translation. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentPostAsync(TextDocumentFileRequest textDocumentFileRequest, final ApiCallback<StatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentPostValidateBeforeCall(textDocumentFileRequest, _callback);
        Type localVarReturnType = new TypeToken<StatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentRequestIdGet
     * @param requestId GUID which got from /v3/translation/document response (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentRequestIdGetCall(String requestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/document/{requestId}"
            .replace("{" + "requestId" + "}", localVarApiClient.escapeString(requestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentRequestIdGetValidateBeforeCall(String requestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'requestId' is set
        if (requestId == null) {
            throw new ApiException("Missing the required parameter 'requestId' when calling documentRequestIdGet(Async)");
        }

        return documentRequestIdGetCall(requestId, _callback);

    }

    /**
     * Return document translation status.  Also return URLs for downloading of translated document if translation was successful
     * 
     * @param requestId GUID which got from /v3/translation/document response (required)
     * @return CloudFileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CloudFileResponse documentRequestIdGet(String requestId) throws ApiException {
        ApiResponse<CloudFileResponse> localVarResp = documentRequestIdGetWithHttpInfo(requestId);
        return localVarResp.getData();
    }

    /**
     * Return document translation status.  Also return URLs for downloading of translated document if translation was successful
     * 
     * @param requestId GUID which got from /v3/translation/document response (required)
     * @return ApiResponse&lt;CloudFileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CloudFileResponse> documentRequestIdGetWithHttpInfo(String requestId) throws ApiException {
        okhttp3.Call localVarCall = documentRequestIdGetValidateBeforeCall(requestId, null);
        Type localVarReturnType = new TypeToken<CloudFileResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return document translation status.  Also return URLs for downloading of translated document if translation was successful (asynchronously)
     * 
     * @param requestId GUID which got from /v3/translation/document response (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentRequestIdGetAsync(String requestId, final ApiCallback<CloudFileResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentRequestIdGetValidateBeforeCall(requestId, _callback);
        Type localVarReturnType = new TypeToken<CloudFileResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hcGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hcGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/hc";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hcGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return hcGetCall(_callback);

    }

    /**
     * Health check for all services.
     * 
     * @return HealthCheckStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public HealthCheckStatus hcGet() throws ApiException {
        ApiResponse<HealthCheckStatus> localVarResp = hcGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Health check for all services.
     * 
     * @return ApiResponse&lt;HealthCheckStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HealthCheckStatus> hcGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = hcGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<HealthCheckStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Health check for all services. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hcGetAsync(final ApiCallback<HealthCheckStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = hcGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<HealthCheckStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for htmlPost
     * @param sourceLanguage Language of original file (optional, default to en)
     * @param targetLanguages List of target languages (optional)
     * @param _file File as byte array (optional)
     * @param originalFileName Type in the file name. If null will be as request ID. (optional)
     * @param url Link to file for translation. Ignore, if \\\&quot;file\\\&quot; property not null (optional)
     * @param origin Url or name of application using this SDK. Not required. (optional)
     * @param savingMode Toggle file saving mode for storage.  Is Files by default. (optional)
     * @param outputFormat output file format (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call htmlPostCall(String sourceLanguage, List<String> targetLanguages, byte[] _file, String originalFileName, String url, String origin, String savingMode, String outputFormat, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/html";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sourceLanguage != null) {
            localVarFormParams.put("sourceLanguage", sourceLanguage);
        }

        if (targetLanguages != null) {
            localVarFormParams.put("targetLanguages", targetLanguages);
        }

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (originalFileName != null) {
            localVarFormParams.put("originalFileName", originalFileName);
        }

        if (url != null) {
            localVarFormParams.put("url", url);
        }

        if (origin != null) {
            localVarFormParams.put("origin", origin);
        }

        if (savingMode != null) {
            localVarFormParams.put("savingMode", savingMode);
        }

        if (outputFormat != null) {
            localVarFormParams.put("outputFormat", outputFormat);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call htmlPostValidateBeforeCall(String sourceLanguage, List<String> targetLanguages, byte[] _file, String originalFileName, String url, String origin, String savingMode, String outputFormat, final ApiCallback _callback) throws ApiException {
        return htmlPostCall(sourceLanguage, targetLanguages, _file, originalFileName, url, origin, savingMode, outputFormat, _callback);

    }

    /**
     * Translate HTML files
     * 
     * @param sourceLanguage Language of original file (optional, default to en)
     * @param targetLanguages List of target languages (optional)
     * @param _file File as byte array (optional)
     * @param originalFileName Type in the file name. If null will be as request ID. (optional)
     * @param url Link to file for translation. Ignore, if \\\&quot;file\\\&quot; property not null (optional)
     * @param origin Url or name of application using this SDK. Not required. (optional)
     * @param savingMode Toggle file saving mode for storage.  Is Files by default. (optional)
     * @param outputFormat output file format (optional)
     * @return StatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public StatusResponse htmlPost(String sourceLanguage, List<String> targetLanguages, byte[] _file, String originalFileName, String url, String origin, String savingMode, String outputFormat) throws ApiException {
        ApiResponse<StatusResponse> localVarResp = htmlPostWithHttpInfo(sourceLanguage, targetLanguages, _file, originalFileName, url, origin, savingMode, outputFormat);
        return localVarResp.getData();
    }

    /**
     * Translate HTML files
     * 
     * @param sourceLanguage Language of original file (optional, default to en)
     * @param targetLanguages List of target languages (optional)
     * @param _file File as byte array (optional)
     * @param originalFileName Type in the file name. If null will be as request ID. (optional)
     * @param url Link to file for translation. Ignore, if \\\&quot;file\\\&quot; property not null (optional)
     * @param origin Url or name of application using this SDK. Not required. (optional)
     * @param savingMode Toggle file saving mode for storage.  Is Files by default. (optional)
     * @param outputFormat output file format (optional)
     * @return ApiResponse&lt;StatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StatusResponse> htmlPostWithHttpInfo(String sourceLanguage, List<String> targetLanguages, byte[] _file, String originalFileName, String url, String origin, String savingMode, String outputFormat) throws ApiException {
        okhttp3.Call localVarCall = htmlPostValidateBeforeCall(sourceLanguage, targetLanguages, _file, originalFileName, url, origin, savingMode, outputFormat, null);
        Type localVarReturnType = new TypeToken<StatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Translate HTML files (asynchronously)
     * 
     * @param sourceLanguage Language of original file (optional, default to en)
     * @param targetLanguages List of target languages (optional)
     * @param _file File as byte array (optional)
     * @param originalFileName Type in the file name. If null will be as request ID. (optional)
     * @param url Link to file for translation. Ignore, if \\\&quot;file\\\&quot; property not null (optional)
     * @param origin Url or name of application using this SDK. Not required. (optional)
     * @param savingMode Toggle file saving mode for storage.  Is Files by default. (optional)
     * @param outputFormat output file format (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call htmlPostAsync(String sourceLanguage, List<String> targetLanguages, byte[] _file, String originalFileName, String url, String origin, String savingMode, String outputFormat, final ApiCallback<StatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = htmlPostValidateBeforeCall(sourceLanguage, targetLanguages, _file, originalFileName, url, origin, savingMode, outputFormat, _callback);
        Type localVarReturnType = new TypeToken<StatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hugoGet
     * @param id id from PostHugo&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hugoGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/hugo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hugoGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        return hugoGetCall(id, _callback);

    }

    /**
     * Get hugo syntax structure from markdown file
     * 
     * @param id id from PostHugo&gt; (optional)
     * @return CloudHugoResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CloudHugoResponse hugoGet(String id) throws ApiException {
        ApiResponse<CloudHugoResponse> localVarResp = hugoGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get hugo syntax structure from markdown file
     * 
     * @param id id from PostHugo&gt; (optional)
     * @return ApiResponse&lt;CloudHugoResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CloudHugoResponse> hugoGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = hugoGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<CloudHugoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get hugo syntax structure from markdown file (asynchronously)
     * 
     * @param id id from PostHugo&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hugoGetAsync(String id, final ApiCallback<CloudHugoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = hugoGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<CloudHugoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hugoPost
     * @param _file File as byte array (required)
     * @param url Link to file for translation (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hugoPostCall(File _file, String url, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/hugo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("File", _file);
        }

        if (url != null) {
            localVarFormParams.put("Url", url);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hugoPostValidateBeforeCall(File _file, String url, final ApiCallback _callback) throws ApiException {
        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling hugoPost(Async)");
        }

        return hugoPostCall(_file, url, _callback);

    }

    /**
     * Run hugo syntax structure analyzing from markdown file
     * 
     * @param _file File as byte array (required)
     * @param url Link to file for translation (optional)
     * @return StatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public StatusResponse hugoPost(File _file, String url) throws ApiException {
        ApiResponse<StatusResponse> localVarResp = hugoPostWithHttpInfo(_file, url);
        return localVarResp.getData();
    }

    /**
     * Run hugo syntax structure analyzing from markdown file
     * 
     * @param _file File as byte array (required)
     * @param url Link to file for translation (optional)
     * @return ApiResponse&lt;StatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StatusResponse> hugoPostWithHttpInfo(File _file, String url) throws ApiException {
        okhttp3.Call localVarCall = hugoPostValidateBeforeCall(_file, url, null);
        Type localVarReturnType = new TypeToken<StatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Run hugo syntax structure analyzing from markdown file (asynchronously)
     * 
     * @param _file File as byte array (required)
     * @param url Link to file for translation (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hugoPostAsync(File _file, String url, final ApiCallback<StatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = hugoPostValidateBeforeCall(_file, url, _callback);
        Type localVarReturnType = new TypeToken<StatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for imageToFilePost
     * @param ocrFileRequest String in body of request, containing JSON with parameters for translation. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageToFilePostCall(OcrFileRequest ocrFileRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ocrFileRequest;

        // create path and map variables
        String localVarPath = "/image-to-file";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imageToFilePostValidateBeforeCall(OcrFileRequest ocrFileRequest, final ApiCallback _callback) throws ApiException {
        return imageToFilePostCall(ocrFileRequest, _callback);

    }

    /**
     * Translate image or scanned pdf and return file
     * 
     * @param ocrFileRequest String in body of request, containing JSON with parameters for translation. (optional)
     * @return StatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public StatusResponse imageToFilePost(OcrFileRequest ocrFileRequest) throws ApiException {
        ApiResponse<StatusResponse> localVarResp = imageToFilePostWithHttpInfo(ocrFileRequest);
        return localVarResp.getData();
    }

    /**
     * Translate image or scanned pdf and return file
     * 
     * @param ocrFileRequest String in body of request, containing JSON with parameters for translation. (optional)
     * @return ApiResponse&lt;StatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StatusResponse> imageToFilePostWithHttpInfo(OcrFileRequest ocrFileRequest) throws ApiException {
        okhttp3.Call localVarCall = imageToFilePostValidateBeforeCall(ocrFileRequest, null);
        Type localVarReturnType = new TypeToken<StatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Translate image or scanned pdf and return file (asynchronously)
     * 
     * @param ocrFileRequest String in body of request, containing JSON with parameters for translation. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageToFilePostAsync(OcrFileRequest ocrFileRequest, final ApiCallback<StatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = imageToFilePostValidateBeforeCall(ocrFileRequest, _callback);
        Type localVarReturnType = new TypeToken<StatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for imageToTextPost
     * @param source Language of original file (required)
     * @param targets List of target languages (required)
     * @param format Originnal file format (optional, default to Unknown)
     * @param url Link to file for translation (optional)
     * @param rotate Left to write angle to rotate scanned image / pdf (optional)
     * @param isHandwritten is handwritten text (optional)
     * @param origin for analysis only (optional)
     * @param route endpoints route (optional)
     * @param _file  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageToTextPostCall(String source, List<String> targets, String format, String url, Integer rotate, Boolean isHandwritten, String origin, String route, File _file, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/image-to-text";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Format", format));
        }

        if (source != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Source", source));
        }

        if (targets != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Targets", targets));
        }

        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Url", url));
        }

        if (rotate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Rotate", rotate));
        }

        if (isHandwritten != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("IsHandwritten", isHandwritten));
        }

        if (origin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Origin", origin));
        }

        if (route != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Route", route));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imageToTextPostValidateBeforeCall(String source, List<String> targets, String format, String url, Integer rotate, Boolean isHandwritten, String origin, String route, File _file, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'source' is set
        if (source == null) {
            throw new ApiException("Missing the required parameter 'source' when calling imageToTextPost(Async)");
        }

        // verify the required parameter 'targets' is set
        if (targets == null) {
            throw new ApiException("Missing the required parameter 'targets' when calling imageToTextPost(Async)");
        }

        return imageToTextPostCall(source, targets, format, url, rotate, isHandwritten, origin, route, _file, _callback);

    }

    /**
     * Translate text on image or scanned pdf
     * 
     * @param source Language of original file (required)
     * @param targets List of target languages (required)
     * @param format Originnal file format (optional, default to Unknown)
     * @param url Link to file for translation (optional)
     * @param rotate Left to write angle to rotate scanned image / pdf (optional)
     * @param isHandwritten is handwritten text (optional)
     * @param origin for analysis only (optional)
     * @param route endpoints route (optional)
     * @param _file  (optional)
     * @return StatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public StatusResponse imageToTextPost(String source, List<String> targets, String format, String url, Integer rotate, Boolean isHandwritten, String origin, String route, File _file) throws ApiException {
        ApiResponse<StatusResponse> localVarResp = imageToTextPostWithHttpInfo(source, targets, format, url, rotate, isHandwritten, origin, route, _file);
        return localVarResp.getData();
    }

    /**
     * Translate text on image or scanned pdf
     * 
     * @param source Language of original file (required)
     * @param targets List of target languages (required)
     * @param format Originnal file format (optional, default to Unknown)
     * @param url Link to file for translation (optional)
     * @param rotate Left to write angle to rotate scanned image / pdf (optional)
     * @param isHandwritten is handwritten text (optional)
     * @param origin for analysis only (optional)
     * @param route endpoints route (optional)
     * @param _file  (optional)
     * @return ApiResponse&lt;StatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StatusResponse> imageToTextPostWithHttpInfo(String source, List<String> targets, String format, String url, Integer rotate, Boolean isHandwritten, String origin, String route, File _file) throws ApiException {
        okhttp3.Call localVarCall = imageToTextPostValidateBeforeCall(source, targets, format, url, rotate, isHandwritten, origin, route, _file, null);
        Type localVarReturnType = new TypeToken<StatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Translate text on image or scanned pdf (asynchronously)
     * 
     * @param source Language of original file (required)
     * @param targets List of target languages (required)
     * @param format Originnal file format (optional, default to Unknown)
     * @param url Link to file for translation (optional)
     * @param rotate Left to write angle to rotate scanned image / pdf (optional)
     * @param isHandwritten is handwritten text (optional)
     * @param origin for analysis only (optional)
     * @param route endpoints route (optional)
     * @param _file  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageToTextPostAsync(String source, List<String> targets, String format, String url, Integer rotate, Boolean isHandwritten, String origin, String route, File _file, final ApiCallback<StatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = imageToTextPostValidateBeforeCall(source, targets, format, url, rotate, isHandwritten, origin, route, _file, _callback);
        Type localVarReturnType = new TypeToken<StatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for languagesGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call languagesGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/languages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call languagesGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return languagesGetCall(_callback);

    }

    /**
     * Return list of available language pairs
     * 
     * @return List&lt;LanguagePairData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<LanguagePairData> languagesGet() throws ApiException {
        ApiResponse<List<LanguagePairData>> localVarResp = languagesGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Return list of available language pairs
     * 
     * @return ApiResponse&lt;List&lt;LanguagePairData&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<LanguagePairData>> languagesGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = languagesGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<LanguagePairData>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return list of available language pairs (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call languagesGetAsync(final ApiCallback<List<LanguagePairData>> _callback) throws ApiException {

        okhttp3.Call localVarCall = languagesGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<LanguagePairData>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for markdownPost
     * @param sourceLanguage Language of original file (required)
     * @param targetLanguages List of target languages (required)
     * @param outputFormat output file format (required)
     * @param _file File as byte array (optional)
     * @param originalFileName Type in the file name. If null will be as request ID. (optional)
     * @param url Link to file for translation. Ignore, if \\\&quot;file\\\&quot; property not null (optional)
     * @param origin Url or name of application using this SDK. Not required. (optional)
     * @param savingMode Toggle file saving mode for storage.  Is Files by default. (optional)
     * @param shortCodeList Dictionary of short code names and parameters names to translate (optional)
     * @param frontMatterList List of lists of frontmatter paths (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call markdownPostCall(String sourceLanguage, List<String> targetLanguages, String outputFormat, byte[] _file, String originalFileName, String url, String origin, String savingMode, Map<String, List<List<String>>> shortCodeList, List<List<String>> frontMatterList, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/markdown";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sourceLanguage != null) {
            localVarFormParams.put("sourceLanguage", sourceLanguage);
        }

        if (targetLanguages != null) {
            localVarFormParams.put("targetLanguages", targetLanguages);
        }

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (originalFileName != null) {
            localVarFormParams.put("originalFileName", originalFileName);
        }

        if (url != null) {
            localVarFormParams.put("url", url);
        }

        if (origin != null) {
            localVarFormParams.put("origin", origin);
        }

        if (savingMode != null) {
            localVarFormParams.put("savingMode", savingMode);
        }

        if (outputFormat != null) {
            localVarFormParams.put("outputFormat", outputFormat);
        }

        if (shortCodeList != null) {
            localVarFormParams.put("shortCodeList", shortCodeList);
        }

        if (frontMatterList != null) {
            localVarFormParams.put("frontMatterList", frontMatterList);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call markdownPostValidateBeforeCall(String sourceLanguage, List<String> targetLanguages, String outputFormat, byte[] _file, String originalFileName, String url, String origin, String savingMode, Map<String, List<List<String>>> shortCodeList, List<List<String>> frontMatterList, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sourceLanguage' is set
        if (sourceLanguage == null) {
            throw new ApiException("Missing the required parameter 'sourceLanguage' when calling markdownPost(Async)");
        }

        // verify the required parameter 'targetLanguages' is set
        if (targetLanguages == null) {
            throw new ApiException("Missing the required parameter 'targetLanguages' when calling markdownPost(Async)");
        }

        // verify the required parameter 'outputFormat' is set
        if (outputFormat == null) {
            throw new ApiException("Missing the required parameter 'outputFormat' when calling markdownPost(Async)");
        }

        return markdownPostCall(sourceLanguage, targetLanguages, outputFormat, _file, originalFileName, url, origin, savingMode, shortCodeList, frontMatterList, _callback);

    }

    /**
     * Translate Markdown files
     * 
     * @param sourceLanguage Language of original file (required)
     * @param targetLanguages List of target languages (required)
     * @param outputFormat output file format (required)
     * @param _file File as byte array (optional)
     * @param originalFileName Type in the file name. If null will be as request ID. (optional)
     * @param url Link to file for translation. Ignore, if \\\&quot;file\\\&quot; property not null (optional)
     * @param origin Url or name of application using this SDK. Not required. (optional)
     * @param savingMode Toggle file saving mode for storage.  Is Files by default. (optional)
     * @param shortCodeList Dictionary of short code names and parameters names to translate (optional)
     * @param frontMatterList List of lists of frontmatter paths (optional)
     * @return StatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public StatusResponse markdownPost(String sourceLanguage, List<String> targetLanguages, String outputFormat, byte[] _file, String originalFileName, String url, String origin, String savingMode, Map<String, List<List<String>>> shortCodeList, List<List<String>> frontMatterList) throws ApiException {
        ApiResponse<StatusResponse> localVarResp = markdownPostWithHttpInfo(sourceLanguage, targetLanguages, outputFormat, _file, originalFileName, url, origin, savingMode, shortCodeList, frontMatterList);
        return localVarResp.getData();
    }

    /**
     * Translate Markdown files
     * 
     * @param sourceLanguage Language of original file (required)
     * @param targetLanguages List of target languages (required)
     * @param outputFormat output file format (required)
     * @param _file File as byte array (optional)
     * @param originalFileName Type in the file name. If null will be as request ID. (optional)
     * @param url Link to file for translation. Ignore, if \\\&quot;file\\\&quot; property not null (optional)
     * @param origin Url or name of application using this SDK. Not required. (optional)
     * @param savingMode Toggle file saving mode for storage.  Is Files by default. (optional)
     * @param shortCodeList Dictionary of short code names and parameters names to translate (optional)
     * @param frontMatterList List of lists of frontmatter paths (optional)
     * @return ApiResponse&lt;StatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StatusResponse> markdownPostWithHttpInfo(String sourceLanguage, List<String> targetLanguages, String outputFormat, byte[] _file, String originalFileName, String url, String origin, String savingMode, Map<String, List<List<String>>> shortCodeList, List<List<String>> frontMatterList) throws ApiException {
        okhttp3.Call localVarCall = markdownPostValidateBeforeCall(sourceLanguage, targetLanguages, outputFormat, _file, originalFileName, url, origin, savingMode, shortCodeList, frontMatterList, null);
        Type localVarReturnType = new TypeToken<StatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Translate Markdown files (asynchronously)
     * 
     * @param sourceLanguage Language of original file (required)
     * @param targetLanguages List of target languages (required)
     * @param outputFormat output file format (required)
     * @param _file File as byte array (optional)
     * @param originalFileName Type in the file name. If null will be as request ID. (optional)
     * @param url Link to file for translation. Ignore, if \\\&quot;file\\\&quot; property not null (optional)
     * @param origin Url or name of application using this SDK. Not required. (optional)
     * @param savingMode Toggle file saving mode for storage.  Is Files by default. (optional)
     * @param shortCodeList Dictionary of short code names and parameters names to translate (optional)
     * @param frontMatterList List of lists of frontmatter paths (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call markdownPostAsync(String sourceLanguage, List<String> targetLanguages, String outputFormat, byte[] _file, String originalFileName, String url, String origin, String savingMode, Map<String, List<List<String>>> shortCodeList, List<List<String>> frontMatterList, final ApiCallback<StatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = markdownPostValidateBeforeCall(sourceLanguage, targetLanguages, outputFormat, _file, originalFileName, url, origin, savingMode, shortCodeList, frontMatterList, _callback);
        Type localVarReturnType = new TypeToken<StatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pdfPost
     * @param pdfFileRequest String in body of request, containing JSON with parameters for translation. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pdfPostCall(PdfFileRequest pdfFileRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pdfFileRequest;

        // create path and map variables
        String localVarPath = "/pdf";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pdfPostValidateBeforeCall(PdfFileRequest pdfFileRequest, final ApiCallback _callback) throws ApiException {
        return pdfPostCall(pdfFileRequest, _callback);

    }

    /**
     * Translate pdf files
     * 
     * @param pdfFileRequest String in body of request, containing JSON with parameters for translation. (optional)
     * @return StatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public StatusResponse pdfPost(PdfFileRequest pdfFileRequest) throws ApiException {
        ApiResponse<StatusResponse> localVarResp = pdfPostWithHttpInfo(pdfFileRequest);
        return localVarResp.getData();
    }

    /**
     * Translate pdf files
     * 
     * @param pdfFileRequest String in body of request, containing JSON with parameters for translation. (optional)
     * @return ApiResponse&lt;StatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StatusResponse> pdfPostWithHttpInfo(PdfFileRequest pdfFileRequest) throws ApiException {
        okhttp3.Call localVarCall = pdfPostValidateBeforeCall(pdfFileRequest, null);
        Type localVarReturnType = new TypeToken<StatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Translate pdf files (asynchronously)
     * 
     * @param pdfFileRequest String in body of request, containing JSON with parameters for translation. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pdfPostAsync(PdfFileRequest pdfFileRequest, final ApiCallback<StatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = pdfPostValidateBeforeCall(pdfFileRequest, _callback);
        Type localVarReturnType = new TypeToken<StatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for presentationPost
     * @param presentationFileRequest String in body of request, containing JSON with parameters for translation. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call presentationPostCall(PresentationFileRequest presentationFileRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = presentationFileRequest;

        // create path and map variables
        String localVarPath = "/presentation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call presentationPostValidateBeforeCall(PresentationFileRequest presentationFileRequest, final ApiCallback _callback) throws ApiException {
        return presentationPostCall(presentationFileRequest, _callback);

    }

    /**
     * Translate Microsoft PowerPoint presentations, odp
     * 
     * @param presentationFileRequest String in body of request, containing JSON with parameters for translation. (optional)
     * @return StatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public StatusResponse presentationPost(PresentationFileRequest presentationFileRequest) throws ApiException {
        ApiResponse<StatusResponse> localVarResp = presentationPostWithHttpInfo(presentationFileRequest);
        return localVarResp.getData();
    }

    /**
     * Translate Microsoft PowerPoint presentations, odp
     * 
     * @param presentationFileRequest String in body of request, containing JSON with parameters for translation. (optional)
     * @return ApiResponse&lt;StatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StatusResponse> presentationPostWithHttpInfo(PresentationFileRequest presentationFileRequest) throws ApiException {
        okhttp3.Call localVarCall = presentationPostValidateBeforeCall(presentationFileRequest, null);
        Type localVarReturnType = new TypeToken<StatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Translate Microsoft PowerPoint presentations, odp (asynchronously)
     * 
     * @param presentationFileRequest String in body of request, containing JSON with parameters for translation. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call presentationPostAsync(PresentationFileRequest presentationFileRequest, final ApiCallback<StatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = presentationPostValidateBeforeCall(presentationFileRequest, _callback);
        Type localVarReturnType = new TypeToken<StatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resxPost
     * @param resxFileRequest String in body of request, containing JSON with parameters for translation. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resxPostCall(ResxFileRequest resxFileRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resxFileRequest;

        // create path and map variables
        String localVarPath = "/resx";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resxPostValidateBeforeCall(ResxFileRequest resxFileRequest, final ApiCallback _callback) throws ApiException {
        return resxPostCall(resxFileRequest, _callback);

    }

    /**
     * Translate RESX files
     * 
     * @param resxFileRequest String in body of request, containing JSON with parameters for translation. (optional)
     * @return StatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public StatusResponse resxPost(ResxFileRequest resxFileRequest) throws ApiException {
        ApiResponse<StatusResponse> localVarResp = resxPostWithHttpInfo(resxFileRequest);
        return localVarResp.getData();
    }

    /**
     * Translate RESX files
     * 
     * @param resxFileRequest String in body of request, containing JSON with parameters for translation. (optional)
     * @return ApiResponse&lt;StatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StatusResponse> resxPostWithHttpInfo(ResxFileRequest resxFileRequest) throws ApiException {
        okhttp3.Call localVarCall = resxPostValidateBeforeCall(resxFileRequest, null);
        Type localVarReturnType = new TypeToken<StatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Translate RESX files (asynchronously)
     * 
     * @param resxFileRequest String in body of request, containing JSON with parameters for translation. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resxPostAsync(ResxFileRequest resxFileRequest, final ApiCallback<StatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = resxPostValidateBeforeCall(resxFileRequest, _callback);
        Type localVarReturnType = new TypeToken<StatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for spreadsheetsPost
     * @param spreadsheetFileRequest String in body of request, containing JSON with parameters for translation. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call spreadsheetsPostCall(SpreadsheetFileRequest spreadsheetFileRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = spreadsheetFileRequest;

        // create path and map variables
        String localVarPath = "/spreadsheets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call spreadsheetsPostValidateBeforeCall(SpreadsheetFileRequest spreadsheetFileRequest, final ApiCallback _callback) throws ApiException {
        return spreadsheetsPostCall(spreadsheetFileRequest, _callback);

    }

    /**
     * Translate Microsoft Excel workbooks, ods
     * 
     * @param spreadsheetFileRequest String in body of request, containing JSON with parameters for translation. (optional)
     * @return StatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public StatusResponse spreadsheetsPost(SpreadsheetFileRequest spreadsheetFileRequest) throws ApiException {
        ApiResponse<StatusResponse> localVarResp = spreadsheetsPostWithHttpInfo(spreadsheetFileRequest);
        return localVarResp.getData();
    }

    /**
     * Translate Microsoft Excel workbooks, ods
     * 
     * @param spreadsheetFileRequest String in body of request, containing JSON with parameters for translation. (optional)
     * @return ApiResponse&lt;StatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StatusResponse> spreadsheetsPostWithHttpInfo(SpreadsheetFileRequest spreadsheetFileRequest) throws ApiException {
        okhttp3.Call localVarCall = spreadsheetsPostValidateBeforeCall(spreadsheetFileRequest, null);
        Type localVarReturnType = new TypeToken<StatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Translate Microsoft Excel workbooks, ods (asynchronously)
     * 
     * @param spreadsheetFileRequest String in body of request, containing JSON with parameters for translation. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call spreadsheetsPostAsync(SpreadsheetFileRequest spreadsheetFileRequest, final ApiCallback<StatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = spreadsheetsPostValidateBeforeCall(spreadsheetFileRequest, _callback);
        Type localVarReturnType = new TypeToken<StatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for textPost
     * @param textRequest String in body of request, containing JSON with parameters for translation. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call textPostCall(TextRequest textRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = textRequest;

        // create path and map variables
        String localVarPath = "/text";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call textPostValidateBeforeCall(TextRequest textRequest, final ApiCallback _callback) throws ApiException {
        return textPostCall(textRequest, _callback);

    }

    /**
     * Translate text
     * 
     * @param textRequest String in body of request, containing JSON with parameters for translation. (optional)
     * @return StatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public StatusResponse textPost(TextRequest textRequest) throws ApiException {
        ApiResponse<StatusResponse> localVarResp = textPostWithHttpInfo(textRequest);
        return localVarResp.getData();
    }

    /**
     * Translate text
     * 
     * @param textRequest String in body of request, containing JSON with parameters for translation. (optional)
     * @return ApiResponse&lt;StatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StatusResponse> textPostWithHttpInfo(TextRequest textRequest) throws ApiException {
        okhttp3.Call localVarCall = textPostValidateBeforeCall(textRequest, null);
        Type localVarReturnType = new TypeToken<StatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Translate text (asynchronously)
     * 
     * @param textRequest String in body of request, containing JSON with parameters for translation. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call textPostAsync(TextRequest textRequest, final ApiCallback<StatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = textPostValidateBeforeCall(textRequest, _callback);
        Type localVarReturnType = new TypeToken<StatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for textRequestIdGet
     * @param requestId GUID which got from /v3/translation/text response (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call textRequestIdGetCall(String requestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/text/{requestId}"
            .replace("{" + "requestId" + "}", localVarApiClient.escapeString(requestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call textRequestIdGetValidateBeforeCall(String requestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'requestId' is set
        if (requestId == null) {
            throw new ApiException("Missing the required parameter 'requestId' when calling textRequestIdGet(Async)");
        }

        return textRequestIdGetCall(requestId, _callback);

    }

    /**
     * Return text translation status.  Also return translated text if translation was successful
     * 
     * @param requestId GUID which got from /v3/translation/text response (required)
     * @return CloudTextResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CloudTextResponse textRequestIdGet(String requestId) throws ApiException {
        ApiResponse<CloudTextResponse> localVarResp = textRequestIdGetWithHttpInfo(requestId);
        return localVarResp.getData();
    }

    /**
     * Return text translation status.  Also return translated text if translation was successful
     * 
     * @param requestId GUID which got from /v3/translation/text response (required)
     * @return ApiResponse&lt;CloudTextResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CloudTextResponse> textRequestIdGetWithHttpInfo(String requestId) throws ApiException {
        okhttp3.Call localVarCall = textRequestIdGetValidateBeforeCall(requestId, null);
        Type localVarReturnType = new TypeToken<CloudTextResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return text translation status.  Also return translated text if translation was successful (asynchronously)
     * 
     * @param requestId GUID which got from /v3/translation/text response (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call textRequestIdGetAsync(String requestId, final ApiCallback<CloudTextResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = textRequestIdGetValidateBeforeCall(requestId, _callback);
        Type localVarReturnType = new TypeToken<CloudTextResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
