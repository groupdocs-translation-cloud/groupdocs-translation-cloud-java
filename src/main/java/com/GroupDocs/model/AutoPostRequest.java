/*
 * GroupDocs.Translation.ApiGateway.Web
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.groupdocs.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.groupdocs.model.WorksheetData;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.groupdocs.JSON;

/**
 * AutoPostRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-01-19T12:43:59.530580+03:00[Europe/Moscow]")
public class AutoPostRequest {
  /**
   * Input file format
   */
  @JsonAdapter(FormatEnum.Adapter.class)
  public enum FormatEnum {
    UNKNOWN("Unknown"),
    
    DOC("Doc"),
    
    DOCX("Docx"),
    
    DOCM("Docm"),
    
    XLS("Xls"),
    
    XLSX("Xlsx"),
    
    XLSM("Xlsm"),
    
    PPT("Ppt"),
    
    PPTX("Pptx"),
    
    PPTM("Pptm"),
    
    TXT("Txt"),
    
    PDF("Pdf"),
    
    MD("Md"),
    
    RESX("Resx"),
    
    HTML("Html"),
    
    RTF("Rtf"),
    
    ODT("Odt"),
    
    ODS("Ods"),
    
    ODP("Odp"),
    
    CSV("Csv"),
    
    TSV("Tsv");

    private String value;

    FormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FormatEnum fromValue(String value) {
      for (FormatEnum b : FormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FormatEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FormatEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FORMAT = "Format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  private FormatEnum format = FormatEnum.UNKNOWN;

  public static final String SERIALIZED_NAME_OUTPUT_FORMAT = "OutputFormat";
  @SerializedName(SERIALIZED_NAME_OUTPUT_FORMAT)
  private String outputFormat;

  public static final String SERIALIZED_NAME_MASTERS = "Masters";
  @SerializedName(SERIALIZED_NAME_MASTERS)
  private Boolean masters = false;

  public static final String SERIALIZED_NAME_FORMATTING = "Formatting";
  @SerializedName(SERIALIZED_NAME_FORMATTING)
  private Boolean formatting = true;

  public static final String SERIALIZED_NAME_ROUTE = "Route";
  @SerializedName(SERIALIZED_NAME_ROUTE)
  private String route;

  public static final String SERIALIZED_NAME_SEPARATOR = "Separator";
  @SerializedName(SERIALIZED_NAME_SEPARATOR)
  private String separator;

  public static final String SERIALIZED_NAME_ELEMENTS = "Elements";
  @SerializedName(SERIALIZED_NAME_ELEMENTS)
  private List<Integer> elements;

  public static final String SERIALIZED_NAME_RANGES = "Ranges";
  @SerializedName(SERIALIZED_NAME_RANGES)
  private Map<String, WorksheetData> ranges = new HashMap<>();

  public static final String SERIALIZED_NAME_SHORT_CODE_LIST = "ShortCodeList";
  @SerializedName(SERIALIZED_NAME_SHORT_CODE_LIST)
  private Map<String, List<List<String>>> shortCodeList = new HashMap<>();

  public static final String SERIALIZED_NAME_FRONT_MATTER_LIST = "FrontMatterList";
  @SerializedName(SERIALIZED_NAME_FRONT_MATTER_LIST)
  private List<List<String>> frontMatterList;

  public static final String SERIALIZED_NAME_SOURCE_LANGUAGE = "SourceLanguage";
  @SerializedName(SERIALIZED_NAME_SOURCE_LANGUAGE)
  private String sourceLanguage = "en";

  public static final String SERIALIZED_NAME_TARGET_LANGUAGES = "TargetLanguages";
  @SerializedName(SERIALIZED_NAME_TARGET_LANGUAGES)
  private List<String> targetLanguages = new ArrayList<>();

  public static final String SERIALIZED_NAME_FILE = "File";
  @SerializedName(SERIALIZED_NAME_FILE)
  private byte[] _file;

  public static final String SERIALIZED_NAME_ORIGINAL_FILE_NAME = "OriginalFileName";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_FILE_NAME)
  private String originalFileName;

  public static final String SERIALIZED_NAME_URL = "Url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_ORIGIN = "Origin";
  @SerializedName(SERIALIZED_NAME_ORIGIN)
  private String origin;

  /**
   * Toggle file saving mode for storage.  Is Files by default.
   */
  @JsonAdapter(SavingModeEnum.Adapter.class)
  public enum SavingModeEnum {
    FILES("Files"),
    
    ARCHIVE("Archive"),
    
    BOTH("Both");

    private String value;

    SavingModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SavingModeEnum fromValue(String value) {
      for (SavingModeEnum b : SavingModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SavingModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SavingModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SavingModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SavingModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SavingModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SAVING_MODE = "SavingMode";
  @SerializedName(SERIALIZED_NAME_SAVING_MODE)
  private SavingModeEnum savingMode;

  public AutoPostRequest() {
  }

  public AutoPostRequest format(FormatEnum format) {
    this.format = format;
    return this;
  }

   /**
   * Input file format
   * @return format
  **/
  @javax.annotation.Nonnull
  public FormatEnum getFormat() {
    return format;
  }

  public void setFormat(FormatEnum format) {
    this.format = format;
  }


  public AutoPostRequest outputFormat(String outputFormat) {
    this.outputFormat = outputFormat;
    return this;
  }

   /**
   * output file format
   * @return outputFormat
  **/
  @javax.annotation.Nonnull
  public String getOutputFormat() {
    return outputFormat;
  }

  public void setOutputFormat(String outputFormat) {
    this.outputFormat = outputFormat;
  }


  public AutoPostRequest masters(Boolean masters) {
    this.masters = masters;
    return this;
  }

   /**
   * If translate master slides
   * @return masters
  **/
  @javax.annotation.Nullable
  public Boolean getMasters() {
    return masters;
  }

  public void setMasters(Boolean masters) {
    this.masters = masters;
  }


  public AutoPostRequest formatting(Boolean formatting) {
    this.formatting = formatting;
    return this;
  }

   /**
   * If document&#39;s formatting should be preserved, default true
   * @return formatting
  **/
  @javax.annotation.Nullable
  public Boolean getFormatting() {
    return formatting;
  }

  public void setFormatting(Boolean formatting) {
    this.formatting = formatting;
  }


  public AutoPostRequest route(String route) {
    this.route = route;
    return this;
  }

   /**
   * Endpoint route
   * @return route
  **/
  @javax.annotation.Nullable
  public String getRoute() {
    return route;
  }

  public void setRoute(String route) {
    this.route = route;
  }


  public AutoPostRequest separator(String separator) {
    this.separator = separator;
    return this;
  }

   /**
   * Separator in files
   * @return separator
  **/
  @javax.annotation.Nullable
  public String getSeparator() {
    return separator;
  }

  public void setSeparator(String separator) {
    this.separator = separator;
  }


  public AutoPostRequest elements(List<Integer> elements) {
    this.elements = elements;
    return this;
  }

  public AutoPostRequest addElementsItem(Integer elementsItem) {
    if (this.elements == null) {
      this.elements = new ArrayList<>();
    }
    this.elements.add(elementsItem);
    return this;
  }

   /**
   * List of slides to translate
   * @return elements
  **/
  @javax.annotation.Nullable
  public List<Integer> getElements() {
    return elements;
  }

  public void setElements(List<Integer> elements) {
    this.elements = elements;
  }


  public AutoPostRequest ranges(Map<String, WorksheetData> ranges) {
    this.ranges = ranges;
    return this;
  }

  public AutoPostRequest putRangesItem(String key, WorksheetData rangesItem) {
    if (this.ranges == null) {
      this.ranges = new HashMap<>();
    }
    this.ranges.put(key, rangesItem);
    return this;
  }

   /**
   * Dictionary of ranges in Excel workbooks
   * @return ranges
  **/
  @javax.annotation.Nullable
  public Map<String, WorksheetData> getRanges() {
    return ranges;
  }

  public void setRanges(Map<String, WorksheetData> ranges) {
    this.ranges = ranges;
  }


  public AutoPostRequest shortCodeList(Map<String, List<List<String>>> shortCodeList) {
    this.shortCodeList = shortCodeList;
    return this;
  }

  public AutoPostRequest putShortCodeListItem(String key, List<List<String>> shortCodeListItem) {
    if (this.shortCodeList == null) {
      this.shortCodeList = new HashMap<>();
    }
    this.shortCodeList.put(key, shortCodeListItem);
    return this;
  }

   /**
   * Dictionary of short code names and parameters names to translate
   * @return shortCodeList
  **/
  @javax.annotation.Nullable
  public Map<String, List<List<String>>> getShortCodeList() {
    return shortCodeList;
  }

  public void setShortCodeList(Map<String, List<List<String>>> shortCodeList) {
    this.shortCodeList = shortCodeList;
  }


  public AutoPostRequest frontMatterList(List<List<String>> frontMatterList) {
    this.frontMatterList = frontMatterList;
    return this;
  }

  public AutoPostRequest addFrontMatterListItem(List<String> frontMatterListItem) {
    if (this.frontMatterList == null) {
      this.frontMatterList = new ArrayList<>();
    }
    this.frontMatterList.add(frontMatterListItem);
    return this;
  }

   /**
   * Dictionary where key is zero-based front matter index and value is list of lists of front matter paths
   * @return frontMatterList
  **/
  @javax.annotation.Nullable
  public List<List<String>> getFrontMatterList() {
    return frontMatterList;
  }

  public void setFrontMatterList(List<List<String>> frontMatterList) {
    this.frontMatterList = frontMatterList;
  }


  public AutoPostRequest sourceLanguage(String sourceLanguage) {
    this.sourceLanguage = sourceLanguage;
    return this;
  }

   /**
   * Language of original file
   * @return sourceLanguage
  **/
  @javax.annotation.Nonnull
  public String getSourceLanguage() {
    return sourceLanguage;
  }

  public void setSourceLanguage(String sourceLanguage) {
    this.sourceLanguage = sourceLanguage;
  }


  public AutoPostRequest targetLanguages(List<String> targetLanguages) {
    this.targetLanguages = targetLanguages;
    return this;
  }

  public AutoPostRequest addTargetLanguagesItem(String targetLanguagesItem) {
    if (this.targetLanguages == null) {
      this.targetLanguages = new ArrayList<>();
    }
    this.targetLanguages.add(targetLanguagesItem);
    return this;
  }

   /**
   * List of target languages
   * @return targetLanguages
  **/
  @javax.annotation.Nonnull
  public List<String> getTargetLanguages() {
    return targetLanguages;
  }

  public void setTargetLanguages(List<String> targetLanguages) {
    this.targetLanguages = targetLanguages;
  }


  public AutoPostRequest _file(byte[] _file) {
    this._file = _file;
    return this;
  }

   /**
   * File as byte array
   * @return _file
  **/
  @javax.annotation.Nullable
  public byte[] getFile() {
    return _file;
  }

  public void setFile(byte[] _file) {
    this._file = _file;
  }


  public AutoPostRequest originalFileName(String originalFileName) {
    this.originalFileName = originalFileName;
    return this;
  }

   /**
   * Type in the file name. If null will be as request ID.
   * @return originalFileName
  **/
  @javax.annotation.Nullable
  public String getOriginalFileName() {
    return originalFileName;
  }

  public void setOriginalFileName(String originalFileName) {
    this.originalFileName = originalFileName;
  }


  public AutoPostRequest url(String url) {
    this.url = url;
    return this;
  }

   /**
   * Link to file for translation. Ignore, if \&quot;file\&quot; property not null
   * @return url
  **/
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public AutoPostRequest origin(String origin) {
    this.origin = origin;
    return this;
  }

   /**
   * Url or name of application using this SDK. Not required.
   * @return origin
  **/
  @javax.annotation.Nullable
  public String getOrigin() {
    return origin;
  }

  public void setOrigin(String origin) {
    this.origin = origin;
  }


  public AutoPostRequest savingMode(SavingModeEnum savingMode) {
    this.savingMode = savingMode;
    return this;
  }

   /**
   * Toggle file saving mode for storage.  Is Files by default.
   * @return savingMode
  **/
  @javax.annotation.Nullable
  public SavingModeEnum getSavingMode() {
    return savingMode;
  }

  public void setSavingMode(SavingModeEnum savingMode) {
    this.savingMode = savingMode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AutoPostRequest autoPostRequest = (AutoPostRequest) o;
    return Objects.equals(this.format, autoPostRequest.format) &&
        Objects.equals(this.outputFormat, autoPostRequest.outputFormat) &&
        Objects.equals(this.masters, autoPostRequest.masters) &&
        Objects.equals(this.formatting, autoPostRequest.formatting) &&
        Objects.equals(this.route, autoPostRequest.route) &&
        Objects.equals(this.separator, autoPostRequest.separator) &&
        Objects.equals(this.elements, autoPostRequest.elements) &&
        Objects.equals(this.ranges, autoPostRequest.ranges) &&
        Objects.equals(this.shortCodeList, autoPostRequest.shortCodeList) &&
        Objects.equals(this.frontMatterList, autoPostRequest.frontMatterList) &&
        Objects.equals(this.sourceLanguage, autoPostRequest.sourceLanguage) &&
        Objects.equals(this.targetLanguages, autoPostRequest.targetLanguages) &&
        Arrays.equals(this._file, autoPostRequest._file) &&
        Objects.equals(this.originalFileName, autoPostRequest.originalFileName) &&
        Objects.equals(this.url, autoPostRequest.url) &&
        Objects.equals(this.origin, autoPostRequest.origin) &&
        Objects.equals(this.savingMode, autoPostRequest.savingMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(format, outputFormat, masters, formatting, route, separator, elements, ranges, shortCodeList, frontMatterList, sourceLanguage, targetLanguages, Arrays.hashCode(_file), originalFileName, url, origin, savingMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AutoPostRequest {\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    outputFormat: ").append(toIndentedString(outputFormat)).append("\n");
    sb.append("    masters: ").append(toIndentedString(masters)).append("\n");
    sb.append("    formatting: ").append(toIndentedString(formatting)).append("\n");
    sb.append("    route: ").append(toIndentedString(route)).append("\n");
    sb.append("    separator: ").append(toIndentedString(separator)).append("\n");
    sb.append("    elements: ").append(toIndentedString(elements)).append("\n");
    sb.append("    ranges: ").append(toIndentedString(ranges)).append("\n");
    sb.append("    shortCodeList: ").append(toIndentedString(shortCodeList)).append("\n");
    sb.append("    frontMatterList: ").append(toIndentedString(frontMatterList)).append("\n");
    sb.append("    sourceLanguage: ").append(toIndentedString(sourceLanguage)).append("\n");
    sb.append("    targetLanguages: ").append(toIndentedString(targetLanguages)).append("\n");
    sb.append("    _file: ").append(toIndentedString(_file)).append("\n");
    sb.append("    originalFileName: ").append(toIndentedString(originalFileName)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    origin: ").append(toIndentedString(origin)).append("\n");
    sb.append("    savingMode: ").append(toIndentedString(savingMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Format");
    openapiFields.add("OutputFormat");
    openapiFields.add("Masters");
    openapiFields.add("Formatting");
    openapiFields.add("Route");
    openapiFields.add("Separator");
    openapiFields.add("Elements");
    openapiFields.add("Ranges");
    openapiFields.add("ShortCodeList");
    openapiFields.add("FrontMatterList");
    openapiFields.add("SourceLanguage");
    openapiFields.add("TargetLanguages");
    openapiFields.add("File");
    openapiFields.add("OriginalFileName");
    openapiFields.add("Url");
    openapiFields.add("Origin");
    openapiFields.add("SavingMode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Format");
    openapiRequiredFields.add("OutputFormat");
    openapiRequiredFields.add("SourceLanguage");
    openapiRequiredFields.add("TargetLanguages");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AutoPostRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AutoPostRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AutoPostRequest is not found in the empty JSON string", AutoPostRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AutoPostRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AutoPostRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AutoPostRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("Format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Format").toString()));
      }
      // validate the required field `Format`
      FormatEnum.validateJsonElement(jsonObj.get("Format"));
      if (!jsonObj.get("OutputFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OutputFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OutputFormat").toString()));
      }
      if ((jsonObj.get("Route") != null && !jsonObj.get("Route").isJsonNull()) && !jsonObj.get("Route").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Route` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Route").toString()));
      }
      if ((jsonObj.get("Separator") != null && !jsonObj.get("Separator").isJsonNull()) && !jsonObj.get("Separator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Separator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Separator").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Elements") != null && !jsonObj.get("Elements").isJsonNull() && !jsonObj.get("Elements").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Elements` to be an array in the JSON string but got `%s`", jsonObj.get("Elements").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("FrontMatterList") != null && !jsonObj.get("FrontMatterList").isJsonNull() && !jsonObj.get("FrontMatterList").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `FrontMatterList` to be an array in the JSON string but got `%s`", jsonObj.get("FrontMatterList").toString()));
      }
      if (!jsonObj.get("SourceLanguage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SourceLanguage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SourceLanguage").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("TargetLanguages") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("TargetLanguages").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `TargetLanguages` to be an array in the JSON string but got `%s`", jsonObj.get("TargetLanguages").toString()));
      }
      if ((jsonObj.get("OriginalFileName") != null && !jsonObj.get("OriginalFileName").isJsonNull()) && !jsonObj.get("OriginalFileName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OriginalFileName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OriginalFileName").toString()));
      }
      if ((jsonObj.get("Url") != null && !jsonObj.get("Url").isJsonNull()) && !jsonObj.get("Url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Url").toString()));
      }
      if ((jsonObj.get("Origin") != null && !jsonObj.get("Origin").isJsonNull()) && !jsonObj.get("Origin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Origin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Origin").toString()));
      }
      if ((jsonObj.get("SavingMode") != null && !jsonObj.get("SavingMode").isJsonNull()) && !jsonObj.get("SavingMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SavingMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SavingMode").toString()));
      }
      // validate the optional field `SavingMode`
      if (jsonObj.get("SavingMode") != null && !jsonObj.get("SavingMode").isJsonNull()) {
        SavingModeEnum.validateJsonElement(jsonObj.get("SavingMode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AutoPostRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AutoPostRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AutoPostRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AutoPostRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AutoPostRequest>() {
           @Override
           public void write(JsonWriter out, AutoPostRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AutoPostRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AutoPostRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AutoPostRequest
  * @throws IOException if the JSON string is invalid with respect to AutoPostRequest
  */
  public static AutoPostRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AutoPostRequest.class);
  }

 /**
  * Convert an instance of AutoPostRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

